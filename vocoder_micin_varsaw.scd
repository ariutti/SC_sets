Pbindef.gui;
s.plotTree;

// 1.create a group to put all the carrier synths inside
~grp_vocoders  = Group.new( ~verb, \addAfter);
//~grp_vocoders  = Group.new( s, \addToTail); //alternative

// move the verb before the vocoder grp if you want the no fx on it
~verb.moveBefore(~grp_vocoders); // NO FX
// move the verb after the vocoder grp if you want the fx on it
~verb.moveAfter(~grp_vocoders);  // FX

// 2. create a bus to connect the modulator synth to the carrier synths
~bus_modulator = Bus.audio(s,1);

~bus_modulator.scope;
~bus_modulator.free;
s.plotTree;


// EVALUATE ALSO THIS !!!
(
~vocoder_amp = 0.0;
)

// external input ///////////////////////////////////////////////////////////////////////
// 3. define a synth for getting sound in from the sound card

(
SynthDef(\inMic, {
	|
	out=0, in=0, amp=1.0
	//gate parameters
	gth    = -22, // dB
	gslope = 7.0,
	//compressor parameters
	cth    = -12, // dB
	cslope = 5.0,
	// filter parameters
	cf = 110
	|
	var sig = SoundIn.ar( in );
	// Noise Gate
	sig = Compander.ar(sig, sig, gth.dbamp, slopeBelow:gslope );
	// Compressor
	sig = Compander.ar(sig, sig, cth.dbamp, slopeAbove:1/cslope );
	// high pass filter
	sig = HPF.ar(sig, cf);
	// MakeUp gain sort-of
	sig = Normalizer.ar(sig) * amp;
	Out.ar(out, sig);
}).add;
)


~synth_voc_modulator = Synth(\inMic, [\amp, 0.5, \out, ~bus_modulator], addAction:\addToHead);
//~voc_modulator = Synth(\in, [\amp, 0.7, \out, 0], addAction:\addToHead);
~synth_voc_modulator.set(\amp, 0.9);
~synth_voc_modulator.set(\g_slope, 9.0);
~synth_voc_modulator.free;

// if any problems occur, you cna move your synth
~synth_voc_modulator.moveBefore(~grp_vocoders); // before vocoder grp
~synth_voc_modulator.moveAfter(~grp_vocoders);  // after vocoder grp


// define a vocoder synth which will use:
// * an external input as the modulator source;
// * a wavetable synth for the carrier;
(
SynthDef(\vocoder_varsaw, {
	|
	out=0, in=2, amp=1.0, freq=440,
	atk=0.1, dcy=0.1, sus=0.7, rel=1,
	width=0.5, pan=0.0, bufnum, gate=1
	|
	var sig, env, chainMod, chainCarr, chain, input;
	env = EnvGen.ar(Env.adsr(atk, dcy, sus, rel), gate, doneAction:2);
	sig = VarSaw.ar(freq, width:width);
	input = In.ar(in,1) * env;

	chainMod = FFT(LocalBuf(1024), input);
	chainMod = PV_MagAbove(chainMod, 0.2);
    chainCarr = FFT(LocalBuf(1024), sig);
    chain  = PV_MagMul(chainCarr, chainMod);
	chain = PV_MagClip(chain, 50);

	sig = IFFT(chain);
	sig = sig * amp;

	sig = LeakDC.ar(sig);
	Out.ar(sig, Pan2.ar(sig, pan));
}).add;
)

/***************************************************************************
 *                         VOCODER PANIC !!!                               *
 **************************************************************************/


// MIDI PANIC sort-of
// this is actually a way to free any stucked synth generated by MIDI note on messages
(
Pbindef(\vocoder_chords).stop;
~grp_vocoders.freeAll; //kill everything inside the group
)
~grp_vocoders.free; // kill the group

// AUTOMATIC CARRIER GENERATION //////////////////////////////////////////////////////


// skyline (aka rubarb)
(
Pbindef(\vocoder_chords,
	\instrument, \vocoder_varsaw,
	\scale, Scale.major,
	\octave, Prand([3,4,5,6], inf).clump(4),
	\root, 5,
	\mtranspose, Pwhite(0.0, 0.025, inf).clump(4),
	\degree, Pseq([Pn([0,3,5,7],4), Pn([0,2,4,7],4)] ,inf), // Bb | F
		//Pn(Prand([0,4,7],4), 1), // F
		//Pn(Prand([1,3,5],8), 1), // Gm
		//Pn(Prand([0,4,7],8), 1), // F
	//], inf),
	\width, 0.5, //Pwhite(0.01, 0.5, inf),
	\in, ~bus_modulator,
	\width, 0.1,
	\atk, 0.5,
	\rel, 1,
	\amp, Pgauss(0.5, 0.01, inf).clump(4) * Pfunc({~vocoder_amp}),
	\dur, Pseq([1], inf),
	\group, ~grp_vocoders,
	\pan, Pwhite(-1.0, 1.0, inf).clump(4)
).quant_([4, 2]).stop.play;
)
Pbindef(\vocoder_chords).stop;
Pbindef(\vocoder_chords).clear;


// bev
(
Pbindef(\vocoder_chords,
	\instrument, \vocoder_varsaw,
	\scale, Scale.minor,
	\octave, Prand([5,6], inf).clump(3),
	\root, 0,
	\degree, Pfunc({~tonica}) + Pseq([[0,2,4]], inf), // Cm, Abmaj, Bb, Cm
	\mtranspose, Pwhite(0.0, 0.001, inf).clump(3),
	\width, 0.3,
	\amp, Pgauss(0.5, 0.01, inf).clump(4) * Pfunc({~vocoder_amp}),
	\in, ~bus_modulator,
	\atk, 0.5,
	\rel, 1,
	\dur, 4,
	\pan, Pwhite(-1.0, 1.0, inf).clump(3),
	\group, ~grp_vocoders,
).quant_([4,0]).stop.play;
)


// happy sunday
(
Pbindef(\vocoder_chords,
	\instrument, \vocoder_varsaw,
	\scale, Scale.harmonicMinor,
	\octave, Prand([[2,3]], inf),
	\root, 3,
	\degree, Pseq([Pn(1,4), Pn(-1,4)], inf),
	\mtranspose, Pwhite(0.0, 0.001, inf),
	\width, 0.1,
	\amp, Pgauss(0.5, 0.01, inf).clump(4) * Pfunc({~vocoder_amp}),
	\in, ~bus_modulator,
	\atk, 0.5,
	\rel, 1,
	\dur, 2,
	\pan, Pwhite(-1.0, 1.0, inf).clump(3),
	\group, ~grp_vocoders,
).quant_([4,0]).stop.play;
)



(
Pbindef(\pads,
	\instrument, \dist,
	\scale, Scale.minor,
	\root,5,
	\mtranspose, Pwhite(-0.01, 0.01, inf).clump(5),
	\octave, Prand([3,4,5],inf).clump(5),
	\degree, Pseq([
		[ -2,0,2, 3, 4 ], // Db
		[-3,-1, 0,2,4], // Fm
		[ -1,1,3 ], // Eb maj

		//[-2,2,6, 7,11,15 ]
	], inf),
	\pan, Pwhite(-1.0, 1.0 ,inf).clump(5),
	\amp, Pgauss(0.1, 0.01, inf).clump(5) * 0.5,
	\rq, Pwhite(2, 0.5, inf),
	\dur, Pseq([8, 4,4], inf),
	\addAction,0
).quant_(4).stop.play;
)


// cromosomi
(
Pbindef(\vocoder_chords,
	\instrument, \vocoder_varsaw,
	\scale, Scale.minor,
	\root,5,
	\mtranspose, Pwhite(-0.0, 0.0, inf).clump(5),
	\octave, Prand([4],inf).clump(5),
	\degree, Pseq([
		[-3,-1, 0,2,4], // Fm
		[ -1,1,3 ], // Eb maj
		[ -2,0,2, 3, 4 ] // Db
	], inf),
	\in, ~bus_modulator,
	\width, 0.01,
	\atk, 0.5,
	\rel, 1,
	\amp, Pgauss(0.5, 0.01, inf).clump(4) * Pfunc({~vocoder_amp}),
	\dur, Pseq([4,4, 8], inf),
	\group, ~grp_vocoders,
	\pan, Pwhite(-1.0, 1.0,inf).clump(5),
).quant_([4, 0]).stop.play;
)




// OTHER TESTS

b = Buffer.read(s,"/home/nicola/Musica/SC_set/20200919_sakanoto_style_sortof/lyrics/lyrics_v1.wav");
{PlayBuf.ar(1, b)}.play
(
SynthDef(\playbuffer, {
	|out=0, in=2, amp=1.0, bufnum|
	var sig = PlayBuf.ar(1, bufnum, BufRateScale.kr(bufnum), loop: 0, doneAction:2);
	Out.ar(out, sig);
}).add;
)
(
Pbindef(\vocoder_loop,
	\instrument, \playbuffer,
	\amp, 1.0,
	\bufnum, b,
	\out, ~bus_modulator,
	\atk, 0.0,
	\rel, 1,
	\dur, 4*8,
).quant_([2]).stop.play;
)


(
a = Synth.basicNew(\playbuffer, nodeID:121249);
a.free;
)